/**
 * Test API endpoints without running server
 * This simulates what frontend does
 */

const testLoginAPI = async () => {
  console.log("üß™ Testing Login API Endpoint\n");
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");

  const testCases = [
    { email: "user@gmail.com", password: "123" },
    { email: "admin@example.com", password: "123" },
    { email: "wrong@email.com", password: "123" },
    { email: "user@gmail.com", password: "wrong" },
  ];

  for (const { email, password } of testCases) {
    console.log(`\nüì§ Testing login:`);
    console.log(`   Email: ${email}`);
    console.log(`   Password: ${password}`);

    try {
      const response = await fetch('http://localhost:5000/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password })
      });

      const data = await response.json();

      if (response.ok) {
        console.log(`   ‚úÖ SUCCESS - Status: ${response.status}`);
        console.log(`   üë§ User: ${data.user.username}`);
        console.log(`   üìß Email: ${data.user.email}`);
        console.log(`   üé≠ Role: ${data.user.role}`);
      } else {
        console.log(`   ‚ùå FAILED - Status: ${response.status}`);
        console.log(`   üí¨ Message: ${data.message}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ERROR: ${error.message}`);
      
      if (error.message.includes('fetch')) {
        console.log(`   ‚ö†Ô∏è  Backend server is not running!`);
        console.log(`   üí° Run: npm start (in backend folder)`);
      }
    }
  }

  console.log("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
  console.log("\n‚úÖ API test complete!");
};

// Check if backend is running first
const checkBackend = async () => {
  console.log("üîç Checking if backend is running...\n");
  
  try {
    const response = await fetch('http://localhost:5000/api/health');
    const data = await response.json();
    
    if (data.success) {
      console.log("‚úÖ Backend is running!");
      console.log(`   Status: ${data.status}`);
      console.log(`   Uptime: ${Math.floor(data.uptime)}s\n`);
      return true;
    }
  } catch (error) {
    console.log("‚ùå Backend is NOT running!");
    console.log("üí° Please start backend first:");
    console.log("   cd backend");
    console.log("   npm start\n");
    return false;
  }
};

// Main
(async () => {
  const isRunning = await checkBackend();
  
  if (isRunning) {
    await testLoginAPI();
  } else {
    console.log("‚ö†Ô∏è  Cannot test API - backend is not running");
    process.exit(1);
  }
})();
